<?php

namespace App\Http\Controllers;

use Carbon\Carbon;
use App\Models\Point;
use App\Models\Prize;
use App\Models\Coupon;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use App\Models\redeemValidateMail;
use Illuminate\Support\MessageBag;
use App\Http\Requests\RedeemCodeRequest;
use App\Http\Controllers\SendEmailController;
use App\Models\PrizeCategory;
use App\Models\Shop;

class RedeemValidateMailController extends Controller
{
        /**
     * The user repository instance.
     */
    protected $errors;

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        //
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        //
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $data = $request->all();
        $prizeCategory = PrizeCategory::whereId($data['code'])->with('prize')->first();
        $prize = $prizeCategory->prize;
        $shop = Shop::whereCode(session('current_shop'))->first();
        $user = $request->user();
        // Validate if User has more points that the cost of the prize
        if ($user->points >= $prize['point']) {
            $data['shop_id'] = $shop['id'];
            $data['prize_category_id'] = $data['code'];
            $data['code'] = strtoupper(Str::random(10));
            $code = new redeemValidateMail($data);
            $code->save();

            // use SendEmailController to send an email to the user with the code of redeem
            $res = SendEmailController::send_code($user,$prize,$code);

            if($res)
            {
                return back()->with('status', 'PARA PODER HACER VÁLIDA LA REDENCIÓN TE ENVIAMOS UN CÓDIGO DE VERIFICACIÓN A TU CORREO '.$user->email);

            } else {
                $code->delete();

                return back()->with('status', 'HUBO UN ERROR AL ENVIAR EL CORREO');
            }

        } else {

            return back()->with('status', 'NO TIENES LOS PUNTOS NECESARIOS.');

        }

    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        //
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(RedeemCodeRequest $request, $id)
    {
        $prizeCategory = PrizeCategory::whereId($id)->with('prize')->first();
        $prize = $prizeCategory->prize;
        $user = $request->user();
        $shop = Shop::whereCode(session('current_shop'))->first();
        $activeredeem = $shop->ActiveRedeem;

        // initialize MessageBag model and is used to redirect with $errors
        $errors = new MessageBag;
        // Verifying if the code generate is relationated with the prize that is redeeming
        if (($activeredeem->prize_category_id ?? '') == $prizeCategory->id && ($activeredeem->active ?? '')) {

            // Validation if the code has no more than 10 minutes to use generating a boolean variable $redeem
            $carbon = Carbon::now('America/Bogota')->subMinutes(10);
            $redeem = $carbon <= $activeredeem->created_at;

            // Validate if the boolean variable $redeem generated by 10 minutes verification is correct
            if($redeem) {

                // Validate if the code is correct
                if (($activeredeem->code ?? '') == $request['code']) {
                    $date = Carbon::now();

                   $coupon = new Coupon([
                       'code' => strtoupper(Str::random(10)),
                       'shop_id' => $shop->id,
                       'prize_category_id' => $prizeCategory->id,
                       ]);

                       redeemValidateMail::whereCode($request['code'])->update(['active' => false]);

                       $points = new Point([
                            'event' => 'Compra cupon '.$prize['name'],
                            'value' => -$prize['point'],
                            'shop_id' => $shop->id,
                            'month' => $date->month,
                            'year' => $date->year
                        ]);

                        $prizeCategory->decrement('stock');

                        $points->save();

                        $coupon->save();

                        $data['user_id'] = $user->id;
                        $data['prize_id'] = $prize['id'];

                        // use SendEmailController to send an email to the user with the code of redeem
                        $res = SendEmailController::redeem_prize($user,$prize);

                        if($res)
                        {
                            return back()->with('status', 'Haz redimido el premio correctamente, recibirás todos los datos de tu redención al correo '.$user->email);

                        } else {

                            return back()->with('status', 'HUBO UN ERROR AL ENVIAR EL CORREO');
                        }


                } else {
                    // Redirect back with the error that explain the code is invalid
                    $errors->add('code', 'El Código es incorrecto!');
                    return back()->withErrors($errors);
                }

            } else {

                // Redirect back if has passed the estimated time
                $errors->add('error_tiempo', 'El codigo ya no es válido, genere uno nuevamente');
                return back()->withErrors($errors);
            }

        } else {

            $errors->add('error', 'Hemos detectado un problema y no se ha podido completar la tarea');
            return back()->withErrors($errors);

        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        //
    }
}
